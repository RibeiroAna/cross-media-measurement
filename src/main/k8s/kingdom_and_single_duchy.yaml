# Copyright 2020 The Measurement System Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Service
metadata:
  name: spanner-emulator
spec:
  selector:
    app: spanner-emulator-app
  type: ClusterIP
  ports:
    - name: "grpc"
      port: 9010
      protocol: TCP
      targetPort: 9010
    - name: "http"
      port: 9020
      protocol: TCP
      targetPort: 9020

---
apiVersion: v1
kind: Service
metadata:
  name: gcs-liquid-legions-server
  annotations:
    system: duchy
spec:
  selector:
    app: gcs-liquid-legions-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: spanner-liquid-legions-computation-storage-server
  annotations:
    system: duchy
spec:
  selector:
    app: spanner-liquid-legions-computation-storage-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: gcp-server
  annotations:
    system: duchy
spec:
  selector:
    app: gcp-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: gcp-kingdom-storage-server
  annotations:
    system: kingdom
spec:
  selector:
    app: gcp-kingdom-storage-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: fake-storage-server
  annotations:
    system: testing
spec:
  selector:
    app: fake-storage-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: global-computation-server
  annotations:
    system: kingdom
spec:
  selector:
    app: global-computation-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: publisher-data-server
  annotations:
    system: duchy
spec:
  selector:
    app: publisher-data-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: requisition-server
  annotations:
    system: kingdom
spec:
  selector:
    app: requisition-server-app
  type: ClusterIP
  ports:
    - name: "port"
      port: 8080
      protocol: TCP
      targetPort: 8080

---
apiVersion: batch/v1
kind: Job
metadata:
  name: push-spanner-schema-job
spec:
  template:
    spec:
      containers:
        - name: push-spanner-schema-container
          image: bazel/src/main/kotlin/org/wfanet/measurement/tools:push_spanner_schema_image
          imagePullPolicy: Never
          args:
          - "--emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)"
          - "--create-instance"
          - "--instance-config-id=spanner-emulator"
          - "--instance-display-name=EmulatorInstance"
          - "--instance-node-count=1"
          - "--instance-name=emulator-instance"
          - "--project-name=PrivateReachAndFrequencyEstimator"
          - "--databases=kingdom=/app/wfa_measurement_system/src/main/db/gcp/kingdom.sdl"
          - "--databases=duchy_metric_values=/app/wfa_measurement_system/src/main/db/gcp/metric_values.sdl"
          - "--databases=duchy_computations=/app/wfa_measurement_system/src/main/db/gcp/computations.sdl"
      restartPolicy: OnFailure

---
apiVersion: v1
kind: Pod
metadata:
  name: spanner-emulator-pod
  labels:
    app: spanner-emulator-app
spec:
  containers:
    - name: spanner-emulator-container
      image: gcr.io/cloud-spanner-emulator/emulator

---
apiVersion: v1
kind: Pod
metadata:
  name: liquid-legions-herald-daemon-pod
  labels:
    app: liquid-legions-herald-daemon-app
  annotations:
    system: duchy
spec:
  containers:
    - name: liquid-legions-herald-daemon-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/duchy/herald:liquid_legions_herald_daemon_image
      imagePullPolicy: Never
      args:
        #  How long to allow for the gRPC channel to shutdown.
        - "--channel-shutdown-timeout=3s"
        #  Address and port of the Computation Storage Service
        - "--computation-storage-service-target=$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_HOST):$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_PORT)"
        #  Address and port of the Global Computation Service
        - "--global-computation-service-target=$(GLOBAL_COMPUTATION_SERVER_SERVICE_HOST):$(GLOBAL_COMPUTATION_SERVER_SERVICE_PORT)"
        #  How long to sleep between calls to the Global Computation
        # Service.
        - "--polling-interval=1m"
        #  Stable unique name for this Duchy.
        - "--duchy-name=test-duchy-1"
        #  DuchyPublicKeyConfig proto message in text format.
        - >
          --duchy-public-keys-config=
          entries {
            key: "combined-public-key-1"
            value {
              combined_public_key_version: 1
              elliptic_curve_id: 415
              el_gamal_generator: "\x03\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96"
              el_gamal_elements {
                key: "test-duchy-1"
                value: "\x02\xd1\x43\x2c\xa0\x07\xa6\xc6\xd7\x39\xfc\xe2\xd2\x1f\xeb\x56\xd9\xa2\xc3\x5c\xf9\x68\x26\x5f\x90\x93\xc4\xb6\x91\xe1\x13\x86\xb3"
              }
              el_gamal_elements {
                key: "test-duchy-2"
                value: "\x03\x9e\xf3\x70\xff\x4d\x21\x62\x25\x40\x17\x81\xd8\x8a\x03\xf5\xa6\x70\xa5\x04\x0e\x63\x33\x49\x2c\xb4\xe0\xcd\x99\x1a\xbb\xd5\xa3"
              }
              el_gamal_elements {
                key: "test-duchy-3"
                value: "\x02\xd0\xf2\x5a\xb4\x45\xfc\x9c\x29\xe7\xe2\x50\x9a\xdc\x93\x30\x84\x30\xf4\x32\x52\x2f\xfa\x93\xc2\xae\x73\x7c\xeb\x48\x0b\x66\xd7"
              }
              combined_el_gamal_element: "\x02\x50\x5d\x7b\x3a\xc4\xc3\xc3\x87\xc7\x41\x32\xab\x67\x7a\x34\x21\xe8\x83\xb9\x0d\x4c\x83\xdc\x76\x6e\x40\x0f\xe6\x7a\xcc\x1f\x04"
            }
          }

---
apiVersion: v1
kind: Pod
metadata:
  name: gcs-liquid-legions-mill-daemon-pod
  labels:
    app: gcs-liquid-legions-mill-daemon-app
  annotations:
    system: duchy
spec:
  containers:
    - name: gcs-liquid-legions-mill-daemon-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/duchy/mill:gcs_liquid_legions_mill_daemon_image
      imagePullPolicy: Never
      args:
        #  The number of bytes in a chunk when sending result to other
        # duchy.
        - "--bytes-per-chunk=2000000"
        #  How long to allow for the gRPC channel to shutdown.
        - "--channel-shutdown-timeout=3s"
        #  gRPC target (authority string or URI) of the
        # ComputationControl service in another Duchy. This is a
        # key=value pair where the key is the other Duchy's name. It
        # can be repeated.
        - "--computation-control-service-target=test-duchy-2=localhost:9002" # TODO: Set k8s service for COMPUTATION-CONTROL-SERVICE_HOST}:${" # TODO: Set k8s service for COMPUTATION-CONTROL-SERVICE_PORT}"
        - "--computation-control-service-target=test-duchy-3=localhost:9003" # TODO: Set k8s service for COMPUTATION-CONTROL-SERVICE_HOST}:${" # TODO: Set k8s service for COMPUTATION-CONTROL-SERVICE_PORT}"
        #  Address and port of the Computation Storage Service
        - "--computation-storage-service-target=$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_HOST):$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_PORT)"
        #  This Duchy's secret key component of its ElGamal key pair.
        - "--duchy-secret-key=" # TODO: Set flag value..."
        #  Address and port of the Kingdom's Global Computations
        # Service
        - "--global-computation-service-target=$(GLOBAL_COMPUTATION_SERVER_SERVICE_HOST):$(GLOBAL_COMPUTATION_SERVER_SERVICE_PORT)"
        #  Name of the Google Cloud Storage project to use.
        - "--google-cloud-storage-bucket=" # TODO: Set flag value..."
        #  Name of the Google Cloud Storage project to use.
        - "--google-cloud-storage-project=" # TODO: Set flag value..."
        #  The decay rate of liquid legions sketch.
        - "--liquid-legions-decay-rate=12.0"
        #  The maximum size of liquid legions sketch.
        - "--liquid-legions-size=100000"
        #  Address and port of the same duchy's MetricValuesService
        - "--metric-values-service-target=localhost:9001" # TODO: Set k8s service for METRIC-VALUES-SERVICE_HOST}:${" # TODO: Set k8s service for METRIC-VALUES-SERVICE_PORT}"
        # The Identifier of the Mill.
        - "--mill-id=" # TODO: Set flag value..."
        #  How long to sleep before polling the computation queue
        # again if it is empty.
        - "--polling-interval=1s"
        - "--duchy-name=test-duchy-1"
        #  DuchyPublicKeyConfig proto message in text format.
        - >
          --duchy-public-keys-config=
          entries {
            key: "combined-public-key-1"
            value {
              combined_public_key_version: 1
              elliptic_curve_id: 415
              el_gamal_generator: "\x03\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96"
              el_gamal_elements {
                key: "test-duchy-1"
                value: "\x02\xd1\x43\x2c\xa0\x07\xa6\xc6\xd7\x39\xfc\xe2\xd2\x1f\xeb\x56\xd9\xa2\xc3\x5c\xf9\x68\x26\x5f\x90\x93\xc4\xb6\x91\xe1\x13\x86\xb3"
              }
              el_gamal_elements {
                key: "test-duchy-2"
                value: "\x03\x9e\xf3\x70\xff\x4d\x21\x62\x25\x40\x17\x81\xd8\x8a\x03\xf5\xa6\x70\xa5\x04\x0e\x63\x33\x49\x2c\xb4\xe0\xcd\x99\x1a\xbb\xd5\xa3"
              }
              el_gamal_elements {
                key: "test-duchy-3"
                value: "\x02\xd0\xf2\x5a\xb4\x45\xfc\x9c\x29\xe7\xe2\x50\x9a\xdc\x93\x30\x84\x30\xf4\x32\x52\x2f\xfa\x93\xc2\xae\x73\x7c\xeb\x48\x0b\x66\xd7"
              }
              combined_el_gamal_element: "\x02\x50\x5d\x7b\x3a\xc4\xc3\xc3\x87\xc7\x41\x32\xab\x67\x7a\x34\x21\xe8\x83\xb9\x0d\x4c\x83\xdc\x76\x6e\x40\x0f\xe6\x7a\xcc\x1f\x04"
            }
          }

---
apiVersion: v1
kind: Pod
metadata:
  name: report-maker-daemon-pod
  labels:
    app: report-maker-daemon-app
  annotations:
    system: kingdom
spec:
  containers:
    - name: report-maker-daemon-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/kingdom:report_maker_daemon_image
      imagePullPolicy: Never
      args:
        - "--internal-services-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)"
        - "--max-concurrency=32"
        - "--throttler-overload-factor=1.2"
        - "--throttler-poll-delay=1ms"
        - "--throttler-time-horizon=2m"
        # Enable verbose debug logging of outgoing gRPC requests
        - "--debug-verbose-grpc-client-logging=true"

---
apiVersion: v1
kind: Pod
metadata:
  name: report-starter-daemon-pod
  labels:
    app: report-starter-daemon-app
  annotations:
    system: kingdom
spec:
  containers:
    - name: report-starter-daemon-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/kingdom:report_starter_daemon_image
      imagePullPolicy: Never
      args:
        - "--internal-services-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)"
        - "--max-concurrency=32"
        - "--throttler-overload-factor=1.2"
        - "--throttler-poll-delay=1ms"
        - "--throttler-time-horizon=2m"
        # Enable verbose debug logging of outgoing gRPC requests
        - "--debug-verbose-grpc-client-logging=true"

---
apiVersion: v1
kind: Pod
metadata:
  name: requisition-linker-daemon-pod
  labels:
    app: requisition-linker-daemon-app
  annotations:
    system: kingdom
spec:
  containers:
    - name: requisition-linker-daemon-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/kingdom:requisition_linker_daemon_image
      imagePullPolicy: Never
      args:
        - "--internal-services-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)"
        - "--max-concurrency=32"
        - "--throttler-overload-factor=1.2"
        - "--throttler-poll-delay=1ms"
        - "--throttler-time-horizon=2m"
        # Enable verbose debug logging of outgoing gRPC requests
        - "--debug-verbose-grpc-client-logging=true"

---
apiVersion: v1
kind: Pod
metadata:
  name: gcs-liquid-legions-server-pod
  labels:
    app: gcs-liquid-legions-server-app
  annotations:
    system: duchy
spec:
  containers:
    - name: gcs-liquid-legions-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/internal/duchy/computation/control:gcs_liquid_legions_server_image
      imagePullPolicy: Never
      args:
        #  Address and port of the Computation Storage Service
        - "--computation-storage-service-target=$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_HOST):$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_PORT)"
        #  Name of the Google Cloud Storage project to use.
        - "--google-cloud-storage-bucket=" # TODO: Set flag value..."
        #  Name of the Google Cloud Storage project to use.
        - "--google-cloud-storage-project=" # TODO: Set flag value..."
        # TCP port for gRPC server.
        - "--port=8080"
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
        #  Stable unique name for this Duchy.
        - "--duchy-name=test-duchy-1"
        #  DuchyPublicKeyConfig proto message in text format.
        - >
          --duchy-public-keys-config=
          entries {
            key: "combined-public-key-1"
            value {
              combined_public_key_version: 1
              elliptic_curve_id: 415
              el_gamal_generator: "\x03\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96"
              el_gamal_elements {
                key: "test-duchy-1"
                value: "\x02\xd1\x43\x2c\xa0\x07\xa6\xc6\xd7\x39\xfc\xe2\xd2\x1f\xeb\x56\xd9\xa2\xc3\x5c\xf9\x68\x26\x5f\x90\x93\xc4\xb6\x91\xe1\x13\x86\xb3"
              }
              el_gamal_elements {
                key: "test-duchy-2"
                value: "\x03\x9e\xf3\x70\xff\x4d\x21\x62\x25\x40\x17\x81\xd8\x8a\x03\xf5\xa6\x70\xa5\x04\x0e\x63\x33\x49\x2c\xb4\xe0\xcd\x99\x1a\xbb\xd5\xa3"
              }
              el_gamal_elements {
                key: "test-duchy-3"
                value: "\x02\xd0\xf2\x5a\xb4\x45\xfc\x9c\x29\xe7\xe2\x50\x9a\xdc\x93\x30\x84\x30\xf4\x32\x52\x2f\xfa\x93\xc2\xae\x73\x7c\xeb\x48\x0b\x66\xd7"
              }
              combined_el_gamal_element: "\x02\x50\x5d\x7b\x3a\xc4\xc3\xc3\x87\xc7\x41\x32\xab\x67\x7a\x34\x21\xe8\x83\xb9\x0d\x4c\x83\xdc\x76\x6e\x40\x0f\xe6\x7a\xcc\x1f\x04"
            }
          }

      ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Pod
metadata:
  name: spanner-liquid-legions-computation-storage-server-pod
  labels:
    app: spanner-liquid-legions-computation-storage-server-app
  annotations:
    system: duchy
spec:
  containers:
    - name: spanner-liquid-legions-computation-storage-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/internal/duchy/computation/storage:spanner_liquid_legions_computation_storage_server_image
      imagePullPolicy: Never
      args:
        # TCP port for gRPC server.
        - "--port=8080"
        #  Name of the Spanner database to create.
        - "--spanner-database=" # TODO: Set flag value..."
        #  Host name and port of the spanner emulator.
        - "--spanner-emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)"
        #  Name of the Spanner instance to create.
        - "--spanner-instance=" # TODO: Set flag value..."
        #  Name of the Spanner project to use.
        - "--spanner-project=" # TODO: Set flag value..."
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
        #  Stable unique name for this Duchy.
        - "--duchy-name=test-duchy-1"
        #  DuchyPublicKeyConfig proto message in text format.
        - >
          --duchy-public-keys-config=
          entries {
            key: "combined-public-key-1"
            value {
              combined_public_key_version: 1
              elliptic_curve_id: 415
              el_gamal_generator: "\x03\x6b\x17\xd1\xf2\xe1\x2c\x42\x47\xf8\xbc\xe6\xe5\x63\xa4\x40\xf2\x77\x03\x7d\x81\x2d\xeb\x33\xa0\xf4\xa1\x39\x45\xd8\x98\xc2\x96"
              el_gamal_elements {
                key: "test-duchy-1"
                value: "\x02\xd1\x43\x2c\xa0\x07\xa6\xc6\xd7\x39\xfc\xe2\xd2\x1f\xeb\x56\xd9\xa2\xc3\x5c\xf9\x68\x26\x5f\x90\x93\xc4\xb6\x91\xe1\x13\x86\xb3"
              }
              el_gamal_elements {
                key: "test-duchy-2"
                value: "\x03\x9e\xf3\x70\xff\x4d\x21\x62\x25\x40\x17\x81\xd8\x8a\x03\xf5\xa6\x70\xa5\x04\x0e\x63\x33\x49\x2c\xb4\xe0\xcd\x99\x1a\xbb\xd5\xa3"
              }
              el_gamal_elements {
                key: "test-duchy-3"
                value: "\x02\xd0\xf2\x5a\xb4\x45\xfc\x9c\x29\xe7\xe2\x50\x9a\xdc\x93\x30\x84\x30\xf4\x32\x52\x2f\xfa\x93\xc2\xae\x73\x7c\xeb\x48\x0b\x66\xd7"
              }
              combined_el_gamal_element: "\x02\x50\x5d\x7b\x3a\xc4\xc3\xc3\x87\xc7\x41\x32\xab\x67\x7a\x34\x21\xe8\x83\xb9\x0d\x4c\x83\xdc\x76\x6e\x40\x0f\xe6\x7a\xcc\x1f\x04"
            }
          }

      ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Pod
metadata:
  name: gcp-server-pod
  labels:
    app: gcp-server-app
  annotations:
    system: duchy
spec:
  containers:
    - name: gcp-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/internal/duchy/metricvalues:gcp_server_image
      imagePullPolicy: Never
      args:
        #  Name of the Google Cloud Storage project to use.
        - "--google-cloud-storage-bucket=" # TODO: Set flag value..."
        #  Name of the Google Cloud Storage project to use.
        - "--google-cloud-storage-project=" # TODO: Set flag value..."
        # TCP port for gRPC server.
        - "--port=8080"
        #  Name of the Spanner database to create.
        - "--spanner-database=" # TODO: Set flag value..."
        #  Host name and port of the spanner emulator.
        - "--spanner-emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)"
        #  Name of the Spanner instance to create.
        - "--spanner-instance=" # TODO: Set flag value..."
        #  Name of the Spanner project to use.
        - "--spanner-project=" # TODO: Set flag value..."
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
      ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Pod
metadata:
  name: gcp-kingdom-storage-server-pod
  labels:
    app: gcp-kingdom-storage-server-app
  annotations:
    system: kingdom
spec:
  containers:
    - name: gcp-kingdom-storage-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/internal/kingdom:gcp_kingdom_storage_server_image
      imagePullPolicy: Never
      args:
        #  List of all valid Duchy ids
        - "--duchy-ids=" # TODO: Set flag value..."
        # TCP port for gRPC server.
        - "--port=8080"
        #  Name of the Spanner database to create.
        - "--spanner-database=" # TODO: Set flag value..."
        #  Host name and port of the spanner emulator.
        - "--spanner-emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)"
        #  Name of the Spanner instance to create.
        - "--spanner-instance=" # TODO: Set flag value..."
        #  Name of the Spanner project to use.
        - "--spanner-project=" # TODO: Set flag value..."
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
      ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Pod
metadata:
  name: fake-storage-server-pod
  labels:
    app: fake-storage-server-app
  annotations:
    system: testing
spec:
  containers:
    - name: fake-storage-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/testing/storage:fake_storage_server_image
      imagePullPolicy: Never
      args:
        # TCP port for gRPC server.
        - "--port=8080"
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
      ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Pod
metadata:
  name: global-computation-server-pod
  labels:
    app: global-computation-server-app
  annotations:
    system: kingdom
spec:
  containers:
    - name: global-computation-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/v1alpha/globalcomputation:global_computation_server_image
      imagePullPolicy: Never
      args:
        #  List of all valid Duchy ids
        - "--duchy-ids=" # TODO: Set flag value..."
        #  Target for Kingdom database APIs, e.g. localhost:8080
        - "--internal-api-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)"
        # TCP port for gRPC server.
        - "--port=8080"
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
        # Enable verbose debug logging of outgoing gRPC requests
        - "--debug-verbose-grpc-client-logging=true"
      ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Pod
metadata:
  name: publisher-data-server-pod
  labels:
    app: publisher-data-server-app
  annotations:
    system: duchy
spec:
  containers:
    - name: publisher-data-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/v1alpha/publisherdata:publisher_data_server_image
      imagePullPolicy: Never
      args:
        #  Stable unique name for this Duchy.
        - "--duchy-name=test-duchy-1"
        #  gRPC target (authority string or URI) for MetricValues
        # service.
        - "--metric-values-service-target=localhost:9001" # TODO: METRIC_VALUES_SERVICE_HOST:METRIC_VALUES_SERVICE_PORT
        # TCP port for gRPC server.
        - "--port=8080"
        #  gRPC target (authority string or URI) for
        # DataProviderRegistration service.
        - "--registration-service-target=localhost:9002" # TODO: REGISTRATION_SERVICE_HOST:REGISTRATION_SERVICE_PORT
        #  gRPC target (authority string or URI) for Requisition
        # service.
        - "--requisition-service-target=$(REQUISITION_SERVER_SERVICE_HOST):$(REQUISITION_SERVER_SERVICE_PORT)"
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
      ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Pod
metadata:
  name: requisition-server-pod
  labels:
    app: requisition-server-app
  annotations:
    system: kingdom
spec:
  containers:
    - name: requisition-server-container
      image: bazel/src/main/kotlin/org/wfanet/measurement/service/v1alpha/requisition:requisition_server_image
      imagePullPolicy: Never
      args:
        #  List of all valid Duchy ids
        - "--duchy-ids=" # TODO: Set flag value..."
        #  Target for Kingdom database APIs, e.g. localhost:8080
        - "--internal-api-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)"
        # TCP port for gRPC server.
        - "--port=8080"
        # Enable verbose debug logging of incoming gRPC requests
        - "--debug-verbose-grpc-server-logging=true"
        # Enable verbose debug logging of outgoing gRPC requests
        - "--debug-verbose-grpc-client-logging=true"
      ports:
        - containerPort: 8080
