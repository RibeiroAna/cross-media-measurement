// Copyright 2020 The Measurement System Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// cue cmd dump src/main/k8s/kingdom_and_single_duchy.cue >
// src/main/k8s/kingdom_and_single_duchy_from_cue.yaml

package kingdom_and_single_duchy

import (
  "encoding/yaml"
  "tool/cli"
)

command: dump: {
  task: print: cli.Print & {
    text: """
          # Do NOT edit this file by hand.
          # This file is generated by kingdom_and_single_duchy.cue\n\n
          """ + yaml.MarshalStream(objects)
  }
}

objects: [ for v in objectSets for x in v { x } ]

objectSets: [
  fake_service,
  duchy_service,
  kingdom_service,
  fake_pod,
  duchy_pod,
  kingdom_pod,
  setup_job
]

fake_service: "spanner-emulator": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: name: "spanner-emulator"
  spec: {
    selector: app: "spanner-emulator-app"
    type: "ClusterIP"
    ports: [{
      name:       "grpc"
      port:       9010
      protocol:   "TCP"
      targetPort: 9010
    }, {
      name:       "http"
      port:       9020
      protocol:   "TCP"
      targetPort: 9020
    }]
  }
}
duchy_service: "gcs-liquid-legions-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "gcs-liquid-legions-server"
    annotations: system: "duchy"
  }
  spec: {
    selector: app: "gcs-liquid-legions-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
duchy_service: "spanner-liquid-legions-computation-storage-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "spanner-liquid-legions-computation-storage-server"
    annotations: system: "duchy"
  }
  spec: {
    selector: app: "spanner-liquid-legions-computation-storage-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
duchy_service: "gcp-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "gcp-server"
    annotations: system: "duchy"
  }
  spec: {
    selector: app: "gcp-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
kingdom_service: "gcp-kingdom-storage-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "gcp-kingdom-storage-server"
    annotations: system: "kingdom"
  }
  spec: {
    selector: app: "gcp-kingdom-storage-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
fake_service: "fake-storage-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "fake-storage-server"
    annotations: system: "testing"
  }
  spec: {
    selector: app: "fake-storage-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
kingdom_service: "global-computation-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "global-computation-server"
    annotations: system: "kingdom"
  }
  spec: {
    selector: app: "global-computation-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
duchy_service: "publisher-data-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "publisher-data-server"
    annotations: system: "duchy"
  }
  spec: {
    selector: app: "publisher-data-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
kingdom_service: "requisition-server": {
  apiVersion: "v1"
  kind:       "Service"
  metadata: {
    name: "requisition-server"
    annotations: system: "kingdom"
  }
  spec: {
    selector: app: "requisition-server-app"
    type: "ClusterIP"
    ports: [{
      name:       "port"
      port:       8080
      protocol:   "TCP"
      targetPort: 8080
    }]
  }
}
fake_pod: "spanner-emulator-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "spanner-emulator-pod"
    labels: app: "spanner-emulator-app"
  }
  spec: containers: [{
    name:  "spanner-emulator-container"
    image: "gcr.io/cloud-spanner-emulator/emulator"
  }]
}
duchy_pod: "liquid-legions-herald-daemon-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "liquid-legions-herald-daemon-pod"
    labels: app: "liquid-legions-herald-daemon-app"
    annotations: system: "duchy"
  }
  spec: containers: [{
    name:            "liquid-legions-herald-daemon-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/duchy/herald:liquid_legions_herald_daemon_image"
    imagePullPolicy: "Never"
    args:
    //  How long to allow for the gRPC channel to shutdown.
    [
      "--channel-shutdown-timeout=3s",
      "--computation-storage-service-target=$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_HOST):$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_PORT)",
      "--global-computation-service-target=$(GLOBAL_COMPUTATION_SERVER_SERVICE_HOST):$(GLOBAL_COMPUTATION_SERVER_SERVICE_PORT)",
      "--polling-interval=1m",
      "--duchy-name=test-duchy-1",
      """
    --duchy-public-keys-config= entries {
      key: \"combined-public-key-1\"
      value {
        combined_public_key_version: 1
        elliptic_curve_id: 415
        el_gamal_generator: \"\\x03\\x6B\\x17\\xD1\\xF2\\xE1\\x2C\\x42\\x47\\xF8\\xBC\\xE6\\xE5\\x63\\xA4\\x40\\xF2\\x77\\x03\\x7D\\x81\\x2D\\xEB\\x33\\xA0\\xF4\\xA1\\x39\\x45\\xD8\\x98\\xC2\\x96\"
        el_gamal_elements {
          key: \"test-duchy-1\"
          value: \"\\x02\\xD1\\x43\\x2C\\xA0\\x07\\xA6\\xC6\\xD7\\x39\\xFC\\xE2\\xD2\\x1F\\xEB\\x56\\xD9\\xA2\\xC3\\x5C\\xF9\\x68\\x26\\x5F\\x90\\x93\\xC4\\xB6\\x91\\xE1\\x13\\x86\\xB3\"
        }
        el_gamal_elements {
          key: \"test-duchy-2\"
          value: \"\\x03\\x9E\\xF3\\x70\\xFF\\x4D\\x21\\x62\\x25\\x40\\x17\\x81\\xD8\\x8A\\x03\\xF5\\xA6\\x70\\xA5\\x04\\x0E\\x63\\x33\\x49\\x2C\\xB4\\xE0\\xCD\\x99\\x1A\\xBB\\xD5\\xA3\"
        }
        el_gamal_elements {
          key: \"test-duchy-3\"
          value: \"\\x02\\xD0\\xF2\\x5A\\xB4\\x45\\xFC\\x9C\\x29\\xE7\\xE2\\x50\\x9A\\xDC\\x93\\x30\\x84\\x30\\xF4\\x32\\x52\\x2F\\xFA\\x93\\xC2\\xAE\\x73\\x7C\\xEB\\x48\\x0B\\x66\\xD7\"
        }
        combined_el_gamal_element: \"\\x02\\x50\\x5D\\x7B\\x3A\\xC4\\xC3\\xC3\\x87\\xC7\\x41\\x32\\xAB\\x67\\x7A\\x34\\x21\\xE8\\x83\\xB9\\x0D\\x4C\\x83\\xDC\\x76\\x6E\\x40\\x0F\\xE6\\x7A\\xCC\\x1F\\x04\"
      }
    }

    """,
    ]
  }]
}
duchy_pod: "gcs-liquid-legions-mill-daemon-pod": {
  //  Address and port of the Computation Storage Service

  //  Address and port of the Global Computation Service

  //  How long to sleep between calls to the Global Computation
  // Service.

  //  Stable unique name for this Duchy.

  //  DuchyPublicKeyConfig proto message in text format.

  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "gcs-liquid-legions-mill-daemon-pod"
    labels: app: "gcs-liquid-legions-mill-daemon-app"
    annotations: system: "duchy"
  }
  spec: containers: [{
    name:            "gcs-liquid-legions-mill-daemon-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/duchy/mill:gcs_liquid_legions_mill_daemon_image"
    imagePullPolicy: "Never"
    args:
    //  The number of bytes in a chunk when sending result to other
    // duchy.
    [
      "--bytes-per-chunk=2000000",
      "--channel-shutdown-timeout=3s",
      "--computation-control-service-target=test-duchy-2=localhost:9002",
      "--computation-control-service-target=test-duchy-3=localhost:9003",
      "--computation-storage-service-target=$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_HOST):$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_PORT)",
      "--duchy-secret-key=057b22ef9c4e9626c22c13daed1363a1e6a5b309a930409f8d131f96ea2fa888",
      "--global-computation-service-target=$(GLOBAL_COMPUTATION_SERVER_SERVICE_HOST):$(GLOBAL_COMPUTATION_SERVER_SERVICE_PORT)",
      "--google-cloud-storage-bucket=",
      "--google-cloud-storage-project=",
      "--liquid-legions-decay-rate=12.0",
      "--liquid-legions-size=100000",
      "--metric-values-service-target=$(GCP_SERVER_SERVICE_HOST):$(GCP_SERVER_SERVICE_PORT)",
      "--mill-id=test-mill-1",
      "--duchy-name=test-duchy-1",
      "--polling-interval=1s",
      """
    --duchy-public-keys-config= entries {
      key: \"combined-public-key-1\"
      value {
        combined_public_key_version: 1
        elliptic_curve_id: 415
        el_gamal_generator: \"\\x03\\x6B\\x17\\xD1\\xF2\\xE1\\x2C\\x42\\x47\\xF8\\xBC\\xE6\\xE5\\x63\\xA4\\x40\\xF2\\x77\\x03\\x7D\\x81\\x2D\\xEB\\x33\\xA0\\xF4\\xA1\\x39\\x45\\xD8\\x98\\xC2\\x96\"
        el_gamal_elements {
          key: \"test-duchy-1\"
          value: \"\\x02\\xD1\\x43\\x2C\\xA0\\x07\\xA6\\xC6\\xD7\\x39\\xFC\\xE2\\xD2\\x1F\\xEB\\x56\\xD9\\xA2\\xC3\\x5C\\xF9\\x68\\x26\\x5F\\x90\\x93\\xC4\\xB6\\x91\\xE1\\x13\\x86\\xB3\"
        }
        el_gamal_elements {
          key: \"test-duchy-2\"
          value: \"\\x03\\x9E\\xF3\\x70\\xFF\\x4D\\x21\\x62\\x25\\x40\\x17\\x81\\xD8\\x8A\\x03\\xF5\\xA6\\x70\\xA5\\x04\\x0E\\x63\\x33\\x49\\x2C\\xB4\\xE0\\xCD\\x99\\x1A\\xBB\\xD5\\xA3\"
        }
        el_gamal_elements {
          key: \"test-duchy-3\"
          value: \"\\x02\\xD0\\xF2\\x5A\\xB4\\x45\\xFC\\x9C\\x29\\xE7\\xE2\\x50\\x9A\\xDC\\x93\\x30\\x84\\x30\\xF4\\x32\\x52\\x2F\\xFA\\x93\\xC2\\xAE\\x73\\x7C\\xEB\\x48\\x0B\\x66\\xD7\"
        }
        combined_el_gamal_element: \"\\x02\\x50\\x5D\\x7B\\x3A\\xC4\\xC3\\xC3\\x87\\xC7\\x41\\x32\\xAB\\x67\\x7A\\x34\\x21\\xE8\\x83\\xB9\\x0D\\x4C\\x83\\xDC\\x76\\x6E\\x40\\x0F\\xE6\\x7A\\xCC\\x1F\\x04\"
      }
    }

    """,

    ]
  }]
}
kingdom_pod: "report-maker-daemon-pod": {
  //  How long to allow for the gRPC channel to shutdown.

  //  gRPC target (authority string or URI) of the
  // ComputationControl service in another Duchy. This is a
  // key=value pair where the key is the other Duchy's name. It
  // can be repeated.
  // TODO: Set k8s service for COMPUTATION-CONTROL-SERVICE_HOST}:${" # TODO: Set k8s service for COMPUTATION-CONTROL-SERVICE_PORT}"
  //  Address and port of the Computation Storage Service

  //  This Duchy's secret key component of its ElGamal key pair.
  // TODO: Set flag value..."
  //  Address and port of the Kingdom's Global Computations
  // Service

  //  Name of the Google Cloud Storage project to use.
  // TODO: Set flag value..."
  //  Name of the Google Cloud Storage project to use.
  // TODO: Set flag value..."
  //  The decay rate of liquid legions sketch.

  //  The maximum size of liquid legions sketch.

  //  Address and port of the same duchy's MetricValuesService
  // TODO: Set k8s service for METRIC-VALUES-SERVICE_HOST}:${" # TODO: Set k8s service for METRIC-VALUES-SERVICE_PORT}"
  // The Identifier of the Mill.
  // TODO: Set flag value..."
  //  How long to sleep before polling the computation queue
  // again if it is empty.

  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "report-maker-daemon-pod"
    labels: app: "report-maker-daemon-app"
    annotations: system: "kingdom"
  }
  spec: containers: [{
    name:            "report-maker-daemon-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/kingdom:report_maker_daemon_image"
    imagePullPolicy: "Never"
    args: [
      "--internal-services-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)",
      "--max-concurrency=32",
      "--throttler-overload-factor=1.2",
      "--throttler-poll-delay=1ms",
      "--throttler-time-horizon=2m",
      "--debug-verbose-grpc-client-logging=true",
    ]
  }]
}
kingdom_pod: "report-starter-daemon-pod": {
  // Enable verbose debug logging of outgoing gRPC requests

  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "report-starter-daemon-pod"
    labels: app: "report-starter-daemon-app"
    annotations: system: "kingdom"
  }
  spec: containers: [{
    name:            "report-starter-daemon-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/kingdom:report_starter_daemon_image"
    imagePullPolicy: "Never"
    args: [
      "--internal-services-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)",
      "--max-concurrency=32",
      "--throttler-overload-factor=1.2",
      "--throttler-poll-delay=1ms",
      "--throttler-time-horizon=2m",
      "--debug-verbose-grpc-client-logging=true",
    ]
  }]
}
kingdom_pod: "requisition-linker-daemon-pod": {
  // Enable verbose debug logging of outgoing gRPC requests

  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "requisition-linker-daemon-pod"
    labels: app: "requisition-linker-daemon-app"
    annotations: system: "kingdom"
  }
  spec: containers: [{
    name:            "requisition-linker-daemon-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/kingdom:requisition_linker_daemon_image"
    imagePullPolicy: "Never"
    args: [
      "--internal-services-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)",
      "--max-concurrency=32",
      "--throttler-overload-factor=1.2",
      "--throttler-poll-delay=1ms",
      "--throttler-time-horizon=2m",
      "--debug-verbose-grpc-client-logging=true",
    ]
  }]
}
duchy_pod: "gcs-liquid-legions-server-pod": {
  // Enable verbose debug logging of outgoing gRPC requests

  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "gcs-liquid-legions-server-pod"
    labels: app: "gcs-liquid-legions-server-app"
    annotations: system: "duchy"
  }
  spec: containers: [{
    name:            "gcs-liquid-legions-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/internal/duchy/computation/control:gcs_liquid_legions_server_image"
    imagePullPolicy: "Never"
    args:
    //  Address and port of the Computation Storage Service
    [
      "--computation-storage-service-target=$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_HOST):$(SPANNER_LIQUID_LEGIONS_COMPUTATION_STORAGE_SERVER_SERVICE_PORT)",
      "--google-cloud-storage-bucket=",
      "--google-cloud-storage-project=",
      "--port=8080",
      "--debug-verbose-grpc-server-logging=true",
      "--duchy-name=test-duchy-1",
      """
    --duchy-public-keys-config= entries {
      key: \"combined-public-key-1\"
      value {
        combined_public_key_version: 1
        elliptic_curve_id: 415
        el_gamal_generator: \"\\x03\\x6B\\x17\\xD1\\xF2\\xE1\\x2C\\x42\\x47\\xF8\\xBC\\xE6\\xE5\\x63\\xA4\\x40\\xF2\\x77\\x03\\x7D\\x81\\x2D\\xEB\\x33\\xA0\\xF4\\xA1\\x39\\x45\\xD8\\x98\\xC2\\x96\"
        el_gamal_elements {
          key: \"test-duchy-1\"
          value: \"\\x02\\xD1\\x43\\x2C\\xA0\\x07\\xA6\\xC6\\xD7\\x39\\xFC\\xE2\\xD2\\x1F\\xEB\\x56\\xD9\\xA2\\xC3\\x5C\\xF9\\x68\\x26\\x5F\\x90\\x93\\xC4\\xB6\\x91\\xE1\\x13\\x86\\xB3\"
        }
        el_gamal_elements {
          key: \"test-duchy-2\"
          value: \"\\x03\\x9E\\xF3\\x70\\xFF\\x4D\\x21\\x62\\x25\\x40\\x17\\x81\\xD8\\x8A\\x03\\xF5\\xA6\\x70\\xA5\\x04\\x0E\\x63\\x33\\x49\\x2C\\xB4\\xE0\\xCD\\x99\\x1A\\xBB\\xD5\\xA3\"
        }
        el_gamal_elements {
          key: \"test-duchy-3\"
          value: \"\\x02\\xD0\\xF2\\x5A\\xB4\\x45\\xFC\\x9C\\x29\\xE7\\xE2\\x50\\x9A\\xDC\\x93\\x30\\x84\\x30\\xF4\\x32\\x52\\x2F\\xFA\\x93\\xC2\\xAE\\x73\\x7C\\xEB\\x48\\x0B\\x66\\xD7\"
        }
        combined_el_gamal_element: \"\\x02\\x50\\x5D\\x7B\\x3A\\xC4\\xC3\\xC3\\x87\\xC7\\x41\\x32\\xAB\\x67\\x7A\\x34\\x21\\xE8\\x83\\xB9\\x0D\\x4C\\x83\\xDC\\x76\\x6E\\x40\\x0F\\xE6\\x7A\\xCC\\x1F\\x04\"
      }
    }

    """,
    ]
    //  Name of the Google Cloud Storage project to use.
    // TODO: Set flag value..."
    //  Name of the Google Cloud Storage project to use.
    // TODO: Set flag value..."
    // TCP port for gRPC server.
    // Enable verbose debug logging of incoming gRPC requests
    //  Stable unique name for this Duchy.
    //  DuchyPublicKeyConfig proto message in text format.

    ports: [{
      containerPort: 8080
    }]
  }]
}
duchy_pod: "spanner-liquid-legions-computation-storage-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "spanner-liquid-legions-computation-storage-server-pod"
    labels: app: "spanner-liquid-legions-computation-storage-server-app"
    annotations: system: "duchy"
  }
  spec: containers: [{
    name:            "spanner-liquid-legions-computation-storage-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/internal/duchy/computation/storage:spanner_liquid_legions_computation_storage_server_image"
    imagePullPolicy: "Never"
    args:
    // TCP port for gRPC server.
    [
      "--port=8080",
      "--spanner-database=",
      "--spanner-emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)",
      "--spanner-instance=",
      "--spanner-project=",
      "--debug-verbose-grpc-server-logging=true",
      "--duchy-name=test-duchy-1",
      "--channel-shutdown-timeout=3s",
      "--global-computation-service-target=$(GLOBAL_COMPUTATION_SERVER_SERVICE_HOST):$(GLOBAL_COMPUTATION_SERVER_SERVICE_PORT)",
      """
    --duchy-public-keys-config= entries {
      key: \"combined-public-key-1\"
      value {
        combined_public_key_version: 1
        elliptic_curve_id: 415
        el_gamal_generator: \"\\x03\\x6B\\x17\\xD1\\xF2\\xE1\\x2C\\x42\\x47\\xF8\\xBC\\xE6\\xE5\\x63\\xA4\\x40\\xF2\\x77\\x03\\x7D\\x81\\x2D\\xEB\\x33\\xA0\\xF4\\xA1\\x39\\x45\\xD8\\x98\\xC2\\x96\"
        el_gamal_elements {
          key: \"test-duchy-1\"
          value: \"\\x02\\xD1\\x43\\x2C\\xA0\\x07\\xA6\\xC6\\xD7\\x39\\xFC\\xE2\\xD2\\x1F\\xEB\\x56\\xD9\\xA2\\xC3\\x5C\\xF9\\x68\\x26\\x5F\\x90\\x93\\xC4\\xB6\\x91\\xE1\\x13\\x86\\xB3\"
        }
        el_gamal_elements {
          key: \"test-duchy-2\"
          value: \"\\x03\\x9E\\xF3\\x70\\xFF\\x4D\\x21\\x62\\x25\\x40\\x17\\x81\\xD8\\x8A\\x03\\xF5\\xA6\\x70\\xA5\\x04\\x0E\\x63\\x33\\x49\\x2C\\xB4\\xE0\\xCD\\x99\\x1A\\xBB\\xD5\\xA3\"
        }
        el_gamal_elements {
          key: \"test-duchy-3\"
          value: \"\\x02\\xD0\\xF2\\x5A\\xB4\\x45\\xFC\\x9C\\x29\\xE7\\xE2\\x50\\x9A\\xDC\\x93\\x30\\x84\\x30\\xF4\\x32\\x52\\x2F\\xFA\\x93\\xC2\\xAE\\x73\\x7C\\xEB\\x48\\x0B\\x66\\xD7\"
        }
        combined_el_gamal_element: \"\\x02\\x50\\x5D\\x7B\\x3A\\xC4\\xC3\\xC3\\x87\\xC7\\x41\\x32\\xAB\\x67\\x7A\\x34\\x21\\xE8\\x83\\xB9\\x0D\\x4C\\x83\\xDC\\x76\\x6E\\x40\\x0F\\xE6\\x7A\\xCC\\x1F\\x04\"
      }
    }

    """,
    ]
    //  Name of the Spanner database to create.
    // TODO: Set flag value..."
    //  Host name and port of the spanner emulator.
    //  Name of the Spanner instance to create.
    // TODO: Set flag value..."
    //  Name of the Spanner project to use.
    // TODO: Set flag value..."
    // Enable verbose debug logging of incoming gRPC requests
    //  Stable unique name for this Duchy.
    //  DuchyPublicKeyConfig proto message in text format.

    ports: [{
      containerPort: 8080
    }]
  }]
}
duchy_pod: "gcp-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "gcp-server-pod"
    labels: app: "gcp-server-app"
    annotations: system: "duchy"
  }
  spec: containers: [{
    name:            "gcp-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/internal/duchy/metricvalues:gcp_server_image"
    imagePullPolicy: "Never"
    args:
    //  Name of the Google Cloud Storage project to use.
    [
      "--google-cloud-storage-bucket=",
      "--google-cloud-storage-project=",
      "--port=8080",
      "--spanner-database=",
      "--spanner-emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)",
      "--spanner-instance=",
      "--spanner-project=",
      "--debug-verbose-grpc-server-logging=true",
    ]
    // TODO: Set flag value..."
    //  Name of the Google Cloud Storage project to use.
    // TODO: Set flag value..."
    // TCP port for gRPC server.
    //  Name of the Spanner database to create.
    // TODO: Set flag value..."
    //  Host name and port of the spanner emulator.
    //  Name of the Spanner instance to create.
    // TODO: Set flag value..."
    //  Name of the Spanner project to use.
    // TODO: Set flag value..."
    // Enable verbose debug logging of incoming gRPC requests
    ports: [{
      containerPort: 8080
    }]
  }]
}
kingdom_pod: "gcp-kingdom-storage-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "gcp-kingdom-storage-server-pod"
    labels: app: "gcp-kingdom-storage-server-app"
    annotations: system: "kingdom"
  }
  spec: containers: [{
    name:            "gcp-kingdom-storage-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/internal/kingdom:gcp_kingdom_storage_server_image"
    imagePullPolicy: "Never"
    args:
    //  List of all valid Duchy ids
    [
      "--duchy-ids=",
      "--port=8080",
      "--spanner-database=",
      "--spanner-emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)",
      "--spanner-instance=",
      "--spanner-project=",
      "--debug-verbose-grpc-server-logging=true",
    ]
    // TODO: Set flag value..."
    // TCP port for gRPC server.
    //  Name of the Spanner database to create.
    // TODO: Set flag value..."
    //  Host name and port of the spanner emulator.
    //  Name of the Spanner instance to create.
    // TODO: Set flag value..."
    //  Name of the Spanner project to use.
    // TODO: Set flag value..."
    // Enable verbose debug logging of incoming gRPC requests
    ports: [{
      containerPort: 8080
    }]
  }]
}
fake_pod: "fake-storage-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "fake-storage-server-pod"
    labels: app: "fake-storage-server-app"
    annotations: system: "testing"
  }
  spec: containers: [{
    name:            "fake-storage-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/testing/storage:fake_storage_server_image"
    imagePullPolicy: "Never"
    args:
    // TCP port for gRPC server.
    [
      "--port=8080",
      "--debug-verbose-grpc-server-logging=true",
    ]
    // Enable verbose debug logging of incoming gRPC requests
    ports: [{
      containerPort: 8080
    }]
  }]
}
kingdom_pod: "global-computation-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "global-computation-server-pod"
    labels: app: "global-computation-server-app"
    annotations: system: "kingdom"
  }
  spec: containers: [{
    name:            "global-computation-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/v1alpha/globalcomputation:global_computation_server_image"
    imagePullPolicy: "Never"
    args:
    //  List of all valid Duchy ids
    [
      "--duchy-ids=",
      "--internal-api-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)",
      "--port=8080",
      "--debug-verbose-grpc-server-logging=true",
      "--debug-verbose-grpc-client-logging=true",
    ]
    // TODO: Set flag value..."
    //  Target for Kingdom database APIs, e.g. localhost:8080
    // TCP port for gRPC server.
    // Enable verbose debug logging of incoming gRPC requests
    // Enable verbose debug logging of outgoing gRPC requests
    ports: [{
      containerPort: 8080
    }]
  }]
}
duchy_pod: "publisher-data-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "publisher-data-server-pod"
    labels: app: "publisher-data-server-app"
    annotations: system: "duchy"
  }
  spec: containers: [{
    name:            "publisher-data-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/v1alpha/publisherdata:publisher_data_server_image"
    imagePullPolicy: "Never"
    args:
    //  Stable unique name for this Duchy.
    [
      "--duchy-name=test-duchy-1",
      "--metric-values-service-target=${",
      "--port=8080",
      "--registration-service-target=${",
      "--requisition-service-target=${REQUISITION_SERVER_SERVICE_HOST}:${REQUISITION_SERVER_SERVICE_PORT}",
      "--debug-verbose-grpc-server-logging=true",
    ]
    //  gRPC target (authority string or URI) for MetricValues
    // service.
    // TODO: Set k8s service for METRIC-VALUES-SERVICE_HOST}:${" # TODO: Set k8s service for METRIC-VALUES-SERVICE_PORT}"
    // TCP port for gRPC server.
    //  gRPC target (authority string or URI) for
    // DataProviderRegistration service.
    // TODO: Set k8s service for REGISTRATION-SERVICE_HOST}:${" # TODO: Set k8s service for REGISTRATION-SERVICE_PORT}"
    //  gRPC target (authority string or URI) for Requisition
    // service.
    // Enable verbose debug logging of incoming gRPC requests
    ports: [{
      containerPort: 8080
    }]
  }]
}
kingdom_pod: "requisition-server-pod": {
  apiVersion: "v1"
  kind:       "Pod"
  metadata: {
    name: "requisition-server-pod"
    labels: app: "requisition-server-app"
    annotations: system: "kingdom"
  }
  spec: containers: [{
    name:            "requisition-server-container"
    image:           "bazel/src/main/kotlin/org/wfanet/measurement/service/v1alpha/requisition:requisition_server_image"
    imagePullPolicy: "Never"
    args:
    //  List of all valid Duchy ids
    [
      "--duchy-ids=",
      "--internal-api-target=$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_HOST):$(GCP_KINGDOM_STORAGE_SERVER_SERVICE_PORT)",
      "--port=8080",
      "--debug-verbose-grpc-server-logging=true",
      "--debug-verbose-grpc-client-logging=true",
    ]
    // TODO: Set flag value..."
    //  Target for Kingdom database APIs, e.g. localhost:8080
    // TCP port for gRPC server.
    // Enable verbose debug logging of incoming gRPC requests
    // Enable verbose debug logging of outgoing gRPC requests
    ports: [{
      containerPort: 8080
    }]
  }]
}
setup_job: "push-spanner-schema-job": {
  apiVersion: "batch/v1"
  kind:       "Job"
  metadata: {
    name: "push-spanner-schema-job"
  }
  spec: template : spec: {
    containers: [{
      name:            "push-spanner-schema-container"
      image:           "bazel/src/main/kotlin/org/wfanet/measurement/tools:push_spanner_schema_image"
      imagePullPolicy: "Never"
      args: [
        "--emulator-host=$(SPANNER_EMULATOR_SERVICE_HOST):$(SPANNER_EMULATOR_SERVICE_PORT)",
        "--create-instance",
        "--instance-config-id=spanner-emulator",
        "--instance-display-name=EmulatorInstance",
        "--instance-node-count=1",
        "--instance-name=emulator-instance",
        "--project-name=PrivateReachAndFrequencyEstimator",
        "--databases=kingdom=/app/wfa_measurement_system/src/main/db/gcp/kingdom.sdl",
        "--databases=duchy_metric_values=/app/wfa_measurement_system/src/main/db/gcp/metric_values.sdl",
        "--databases=duchy_computations=/app/wfa_measurement_system/src/main/db/gcp/computations.sdl",
      ]
     }]
    restartPolicy: "OnFailure"
  }
}