// Copyright 2020 The Measurement System Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal;

option java_package = "org.wfanet.measurement.internal";
option java_multiple_files = true;

// Stage of a computation that is combining sketches around a ring of
// MPC Worker Nodes at one of the MPC Worker Nodes.
enum SketchAggregationStage {
  // The computation stage is unknown. This is never set intentionally.
  UNKNOWN = 0;
  // The computation is known but work has not started yet. Sketches required
  // for the computation stored at the local worker will be collected as part
  // of this stage.
  CREATED = 1;
  // The worker will add noise to the sketch.
  TO_ADD_NOISE = 2;
  // The primary worker is waiting for sketches from all the other MPC worker
  // nodes.
  WAIT_SKETCHES = 3;
  // The primary worker has received all the sketches needed to run the
  // computation. It will combine them together into a single sketch, i.e.
  // the first concatenated sketch.
  TO_APPEND_SKETCHES = 4;
  // The worker is waiting to receive a copy of the concatenated sketch from
  // the previous worker in the ring of workers. The primary worker is the
  // one to first send the concatenated sketch to the next worker, but it
  // does so before re-encrypting it's positional values. So the primary
  // Worker is waiting on a sketch from the Nth worker.
  WAIT_CONCATENATED = 5;
  // The non-primary worker re-encrypts its positional values in ths
  // concatenated sketch.
  TO_BLIND_POSITIONS = 6;
  // The primary worker re-encrypts the position values of the sketch and
  // joins them based on their re-encrypted positional values. Combining is
  // via the same key aggregation method to create the encrypted flag and
  // count tuples.
  TO_BLIND_POSITIONS_AND_JOIN_REGISTERS = 7;
  // The worker is waiting on its predecessor in the ring of workers for the
  // join sketch. The primary worker is the first to send the joined sketch,
  // but also the last to re-encrypt values in it.
  WAIT_FLAG_COUNTS = 8;
  // A non-primary worker decrypts the counts - which are the summed values
  // across all sketches for the same register value - and their flag values.
  TO_DECRYPT_FLAG_COUNTS = 9;
  // The primary worker computes the final reach and frequency.
  // This is the corollary of TO_DECRYPT_FLAG_COUNTS done at the non-primary
  // worker but the primary also uses a lookup table to map flags to
  // booleans and counts to actual integers, which are then used to in the
  // final reach and frequency estimations.
  TO_DECRYPT_FLAG_COUNTS_AND_COMPUTE_METRICS = 10;
  // The computation is done the worker can remove BLOBs that are no longer
  // needed.
  COMPLETED = 11;
}