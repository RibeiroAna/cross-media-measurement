syntax = "proto3";

package wfa.measurement.internal.duchy;

option java_package = "org.wfanet.measurement.internal.duchy";
option java_multiple_files = true;

// Service definition for Scheduling work to be done by the MPC Nodes. This
// service is how the centralized system interacts with MPC nodes.
service WorkManagementService {
  // Tell a worker an MPC job is starting.
  // The worker will note the metadata about the computations such as,
  // the order of workers, and the report being computed.
  rpc StartComputation(StartComputationRequest)
      returns (StartComputationResponse) {}

  // Tell a worker to stop an MPC computation. The reason for finishing
  // the computation is included in the request, so it could be that the
  // primary has sent results back to the centralized service, or that
  // the centralized service is canceling the computation. In either
  // case the worker no longer needs any intermediate BLOB storage.
  rpc FinishComputation(FinishComputationRequest)
      returns (FinishComputationResponse) {}

  // Tells the primary worker to get the computation moving again.
  // There is no guarantee the primary can get the computation to
  // succeed as it may be failing for unknown reasons in another
  // organization's cloud infrastructure.
  rpc ResumeComputation(ResumeComputationRequest)
      returns (ResumeComputationResponse) {}
}

// Tells a worker a computation is starting and the order in which the workers
// will process the computation. The primary worker will be in charge of kicking
// off the MPC, all others send sketches to the primary.
message StartComputationRequest {
  // The identifier of the multi-party computation to start.
  uint64 computation_id = 1;

  // The configuration of the report being generated by this computation.
  // This config has all the information needed to know which sketches
  // to fetch and combine.
  ReportConfig report_config = 2;
}

message StartComputationResponse {
  // Deliberately empty
}

// Tells a worker to stop an MPC computation.
message FinishComputationRequest {
  // The identifier of the multi-party computation to stop.
  uint64 computation_id = 1;
}

message FinishComputationResponse {
  // Deliberately empty
}

// Tells the primary to resume work on a paused/stuck computation.
// The primary will send new requests, depending on its stage,
// to its outgoing Node to get the computation moving again.
message ResumeComputationRequest {
  // The identifier of the multi-party computation to resume.
  uint64 computation_id = 1;
}

message ResumeComputationResponse {
  // Deliberately empty
}

message ReportConfig {
  // Deliberately empty
}