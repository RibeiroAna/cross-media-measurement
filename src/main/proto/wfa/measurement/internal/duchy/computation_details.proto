// Copyright 2020 The Measurement System Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.internal.duchy;

option java_package = "org.wfanet.measurement.internal.duchy";
option java_multiple_files = true;

// Details about a computation at a MPC Worker Node.
message ComputationDetails {
  enum RoleInComputation {
    // Never set intentionally
    UNKNOWN = 0;
    // The primary duchy for the computation.
    PRIMARY = 1;
    // A non-primary duchy for the computation. This duchy has to do many
    // crypto operations, but is not responsible for joining sketch positions
    // together, nor computing the final results.
    SECONDARY = 2;
  }
  // The duchy's role in the computation.
  RoleInComputation role = 1;
  // The domain name of the duchy from which this one receives data for the
  // computation.
  string incoming_node_id = 2;
  // The domain name of the duchy where outputs are sent for the computation.
  string outgoing_node_id = 3;
  // A prefix of all the BLOBs stored for this computation. This is used for
  // cleaning up after a computation when the BLOBs are no longer needed.
  string blobs_storage_prefix = 4;

  enum CompletedReason {
    UNSPECIFIED = 0;
    // The computation finished successfully with no errors.
    SUCCEEDED = 1;
    // The computation failed and will not be retried any longer.
    FAILED = 2;
    // The kingdom no longer wanted the results of the computation.
    CANCELED = 3;
  }
  // The final state of the computation at this duchy. This is only set
  // when the protocol has finished for the computation.
  CompletedReason ending_state = 5;
}

// Details about a single attempt of a computation stage.
message ComputationStageAttemptDetails {
  enum EndReason {
    UNSPECIFIED = 0;
    SUCCEEDED = 1;
    // The attempt failed due to a caught error while executing.
    ERROR = 2;
    // The lock expired and was overtaken by another process.
    LOCK_OVERWRITTEN = 3;
    // The computation was cancelled so the results of the stage were
    // no longer needed.
    CANCELLED = 4;
  }
  // The reason why the attempt of the stage ended.
  EndReason reason_ended = 1;
}

// Details about a particular attempt of running a stage for a computation
// within a duchy.
message ComputationStageDetails {
  oneof stage_specific {
    // Details specific to the WAIT_SKETCHES stage.
    WaitSketchesStageDetails wait_sketch_stage_details = 1;
  }
}

// The WAIT_SKETCHES stage has a bootstrapping step where it requires
// input from all other duchies before it can move forward. The bookkeeping
// of which duchy has provided is stored in this message.
message WaitSketchesStageDetails {
  // A mapping of the name of a duchy to the BlobId corresponding to the
  // ComputationBlobDependency.OUTPUT BLOB where it will be written.
  //
  // Upon receiving a sketch from a duchy the OUTPUT reference with the id
  // found in this map is updated with the local copy of the blob. When all
  // the output references have a path the worker can move onto the next stage.
  map<string, int64> external_duchy_local_blob_id = 1;
}