// Copyright 2020 The Measurement System Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.system.v1alpha;

import "wfa/measurement/system/v1alpha/global_computation.proto";

option java_package = "org.wfanet.measurement.system.v1alpha";
option java_multiple_files = true;
option java_outer_classname = "ComputationControlServiceProto";

// Service for controlling inter-Duchy operations on GlobalComputation
// resources.
service ComputationControl {
  // Advance the computation locally according to the request.
  rpc AdvanceComputation(stream AdvanceComputationRequest)
      returns (AdvanceComputationResponse) {}

  // Stores the concatenated, noisy sparse encrypted sketch from a secondary
  // duchy at the primary duchy. Once the primary has sketches from all
  // secondary duchies it can start executing the computation.
  //
  // Sketches can exceed the maximum message size so the client should
  // stream requests containing sequential chunks of the sketch,
  // but the entire sketch should be uploaded in a single stream.
  rpc ProcessNoisedSketch(stream ProcessNoisedSketchRequest)
      returns (ProcessNoisedSketchResponse) {}

  // Stores the concatenated, noisy sparse encrypted sketch for the entire
  // computation at a duchy. The duchy will then decrypt the positional
  // argument of a register three-tuple with its non-deterministic private key,
  // and re-encrypt the same value with a deterministic key. Successful
  // calls to this function signifies that the sketch was stored, not that the
  // re-encryption option was successful.
  //
  // Sketches can exceed the maximum message size so the client should
  // stream requests containing sequential chunks of the sketch,
  // but the entire sketch should be uploaded in a single stream.
  rpc ProcessConcatenatedSketch(stream ProcessConcatenatedSketchRequest)
      returns (ProcessConcatenatedSketchResponse) {}

  // Stores the encrypted flag and count value tuples at the duchy. The duchy
  // will then decrypt the flag and count values inside the sketch. Successful
  // calls to this function signifies that the sketch was stored, not that the
  // cryptographic options were successful.
  rpc ProcessEncryptedFlagsAndCounts(
      stream ProcessEncryptedFlagsAndCountsRequest)
      returns (ProcessEncryptedFlagsAndCountsResponse) {}
}

// Header message for Process method requests on GlobalComputation resources.
message ComputationProcessRequestHeader {
  // Resource key.
  GlobalComputation.Key key = 1;
}

// Body chunk message for GlobalComputation methods which upload sketches.
message ProcessSketchRequestBodyChunk {
  // Partial EncryptedSketch.register_data. A partial sketch might begin or end
  // within or between registers.
  bytes partial_sketch = 1;
}

// Transmit sketches for a computation from a secondary duchy to the primary
// worker. The primary expects a sketch from all secondary duchies. This request
// is essentially storing a mapping of (computation_id, sender) -> sketch.
message ProcessNoisedSketchRequest {
  oneof payload {
    // Payload of first request message.
    ComputationProcessRequestHeader header = 1;

    // Payload of subsequent request messages.
    ProcessSketchRequestBodyChunk body_chunk = 2;
  }
}

message ProcessNoisedSketchResponse {
  // Deliberately empty
}

// Transmits the concatenated sketch from all duchies to another duchy.
// A duchy expects to see this message once per computation and only from
// its predecessor in ring for the computation.
// This request is essentially storing a mapping of (computation_id) -> sketch.
message ProcessConcatenatedSketchRequest {
  oneof payload {
    // Payload of first request message.
    ComputationProcessRequestHeader header = 1;

    // Payload of subsequent request messages.
    ProcessSketchRequestBodyChunk body_chunk = 2;
  }
}

message ProcessConcatenatedSketchResponse {
  // Deliberately empty
}

// Transmits the encrypted flag and count pairs from the combined sketch to
// another duchy. A duchy expects to see this message once per computation and
// only from its predecessor in ring for the computation. This request is
// essentially storing a mapping of (computation_id) -> pairs.
message ProcessEncryptedFlagsAndCountsRequest {
  message BodyChunk {
    // Partial concatenation of (flag, count) pairs in bytes, where each flag or
    // count is a 66-byte ElGamal ciphertext. The partial data may begin or end
    // within or between ciphertexts.
    bytes partial_flags_and_counts = 1;
  }

  oneof payload {
    // Payload of first request message.
    ComputationProcessRequestHeader header = 1;

    // Payload of subsequent request messages.
    BodyChunk body_chunk = 2;
  }
}

message ProcessEncryptedFlagsAndCountsResponse {
  // Deliberately empty
}

// Request to advance the computation at the receiver.
message AdvanceComputationRequest {
  message Header {
    // Resource key.
    GlobalComputation.Key key = 1;
    // The protocol of the computation.
    oneof protocol {
      // The LiquidLegionsV1 (two-round) protocol.
      LiquidLegionsV1 liquid_legions_v1 = 2;
      // The LiquidLegionsV2 (three-round) protocol.
      LiquidLegionsV2 liquid_legions_v2 = 3;
    }
  }

  message BodyChunk {
    // A chunk of the data bytes.
    bytes partial_data = 1;
  }

  oneof payload {
    // Payload of first request message.
    Header header = 1;
    // Payload of subsequent request messages.
    BodyChunk body_chunk = 2;
  }
}

message LiquidLegionsV1 {
  // The description of the data in the payload.
  enum Description {
    // The data type is unknown. This is never set intentionally.
    DESCRIPTION_UNSPECIFIED = 0;
    // NoisedSketch from secondary duchies to the primary.
    NOISED_SKETCH = 1;
    // Concatenated sketch processed at MPC round one.
    CONCATENATED_SKETCH = 2;
    // (Flag, count) pairs processed at MPC round two.
    ENCRYPTED_FLAGS_AND_COUNTS = 3;
  }
  // Payload data description
  Description description = 1;
}

message LiquidLegionsV2 {
  // The description of the data in the payload.
  enum Description {
    // The data type is unknown. This is never set intentionally.
    DESCRIPTION_UNSPECIFIED = 0;
    // The input for the setup phase.
    SETUP_PHASE_INPUT = 1;
    // The input for the reach estimation phase.
    REACH_ESTIMATION_PHASE_INPUT = 2;
    // The input for the filtering phase.
    FILTERING_PHASE_INPUT = 3;
    // The input for the frequency estimation phase.
    FREQUENCY_ESTIMATION_PHASE_INPUT = 4;
  }
  // Payload data description
  Description description = 1;
}

message AdvanceComputationResponse {
  // Deliberately empty
}
